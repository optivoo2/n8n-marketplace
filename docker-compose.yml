version: '3.8'

services:
  # PostgreSQL Database (no Supabase needed)
  postgres:
    image: postgres:15-alpine
    container_name: marketplace-db
    environment:
      POSTGRES_USER: marketplace
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeMe123}
      POSTGRES_DB: n8n_marketplace
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketplace"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - marketplace-network

  # Redis for caching and queue management
  redis:
    image: redis:7-alpine
    container_name: marketplace-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - marketplace-network
    command: redis-server --appendonly yes

  # Meilisearch for lightning-fast template search
  meilisearch:
    image: getmeili/meilisearch:v1.6
    container_name: marketplace-search
    environment:
      MEILI_MASTER_KEY: ${MEILI_MASTER_KEY:-changeMe123}
      MEILI_ENV: production
    ports:
      - "7700:7700"
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - marketplace-network

  # Main API (FastAPI - Python for AI-agent friendliness)
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: marketplace-api
    environment:
      DATABASE_URL: postgresql://marketplace:${DB_PASSWORD:-changeMe123}@postgres:5432/n8n_marketplace
      REDIS_URL: redis://redis:6379
      MEILISEARCH_URL: http://meilisearch:7700
      MEILISEARCH_KEY: ${MEILI_MASTER_KEY:-changeMe123}
      JWT_SECRET: ${JWT_SECRET:-changeMe123}
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY:-}
      MERCADOPAGO_ACCESS_TOKEN: ${MERCADOPAGO_ACCESS_TOKEN:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    volumes:
      - ./api:/app
      - ./templates:/app/templates
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      meilisearch:
        condition: service_started
    networks:
      - marketplace-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # Frontend (Next.js - can be replaced with any frontend)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: marketplace-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://api:8000
      NEXT_PUBLIC_MEILISEARCH_URL: http://meilisearch:7700
      NEXT_PUBLIC_MEILISEARCH_KEY: ${MEILI_PUBLIC_KEY:-}
    volumes:
      - ./frontend:/app
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - marketplace-network

  # n8n instance for testing templates (optional)
  n8n:
    image: n8nio/n8n
    container_name: marketplace-n8n
    environment:
      N8N_BASIC_AUTH_ACTIVE: "true"
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: ${N8N_PASSWORD:-changeMe123}
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: http
      NODE_ENV: production
      WEBHOOK_URL: http://n8n:5678/
    volumes:
      - n8n_data:/home/node/.n8n
    ports:
      - "5678:5678"
    networks:
      - marketplace-network

  # Nginx reverse proxy (for production)
  nginx:
    image: nginx:alpine
    container_name: marketplace-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    networks:
      - marketplace-network

volumes:
  postgres_data:
  redis_data:
  meilisearch_data:
  n8n_data:

networks:
  marketplace-network:
    driver: bridge
